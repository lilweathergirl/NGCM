# -*- coding: utf-8 -*-
"""inference_demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/google-research/neuralgcm/blob/main/docs/inference_demo.ipynb
"""

# if necessary, install NeuralGCM and dependencies
#! pip install -q -U neuralgcm dinosaur-dycore gcsfs

"""# Forecasting quick start

This notebook uses ERA5 data and pretrained NeuralGCM model to make a weather forecast.

The forecast is made in 3 steps:
1. Slice of ERA5 data is regridded to model resolution
2. NeuralGCM model state is initialized and rolled out
3. Predictions and reference trajectory are combined for visualization

By default the notebook uses intermediate deterministic NeuralGCM 1.4° model. Other available checkpoints include deterministic 0.7°, 2.8° and stochastic 1.4° NeuralGCM variations.

```{tip}
You can run this notebook yourself in [Google Colab](https://colab.research.google.com/github/google-research/neuralgcm/blob/main/docs/inference_demo.ipynb). We recommend using a GPU or TPU runtime due to high memory and compute requirements.
```
"""

import gcsfs
import jax
import numpy as np
import pickle
import xarray
import xarray as xr
import matplotlib.pyplot as plt
import pandas as pd
import os
from dinosaur import horizontal_interpolation
from dinosaur import spherical_harmonic
from dinosaur import xarray_utils
import neuralgcm

gcs = gcsfs.GCSFileSystem(token='anon')

"""## Load a pre-trained NeuralGCM model

```{caution}
Trained model weights are licensed for non-commercial use, under the Creative Commons [Attribution-NonCommercial-ShareAlike 4.0 International](https://creativecommons.org/licenses/by-nc-sa/4.0/) license (CC BY-NC-SA 4.0).
```

Pre-trained model checkpoints from the NeuralGCM paper are [available for download](https://console.cloud.google.com/storage/browser/gresearch/neuralgcm/04_30_2024) on Google Cloud Storage:

- Deterministic models:
    - `gs://gresearch/neuralgcm/04_30_2024/neural_gcm_dynamic_forcing_deterministic_0_7_deg.pkl`
    - `gs://gresearch/neuralgcm/04_30_2024/neural_gcm_dynamic_forcing_deterministic_1_4_deg.pkl`
    - `gs://gresearch/neuralgcm/04_30_2024/neural_gcm_dynamic_forcing_deterministic_2_8_deg.pkl`
- Stochastic models:
    - `gs://gresearch/neuralgcm/04_30_2024/neural_gcm_dynamic_forcing_stochastic_1_4_deg.pkl`


"""

# Load a pre-trained NeuralGCM model
model_name = 'neural_gcm_dynamic_forcing_deterministic_1_4_deg.pkl'  # Use 1.4° deterministic model

with gcs.open(f'gs://gresearch/neuralgcm/04_30_2024/{model_name}', 'rb') as f:
    ckpt = pickle.load(f)

# Initialize the NeuralGCM model from the checkpoint
model = neuralgcm.PressureLevelModel.from_checkpoint(ckpt)

# Load ERA5 data from Google Cloud Storage in Zarr format
era5_path = 'gs://gcp-public-data-arco-era5/ar/full_37-1h-0p25deg-chunk-1.zarr-v3'
full_era5 = xarray.open_zarr(gcs.get_mapper(era5_path), chunks=None)


demo_start_time = '2002-05-22'
demo_end_time = '2002-06-01'
data_inner_steps = 24  

# Select the required ERA5 data variables and time period
sliced_era5 = (
    full_era5
    [model.input_variables + model.forcing_variables]
    .pipe(
        xarray_utils.selective_temporal_shift,
        variables=model.forcing_variables,
        time_shift='24 hours',  
    )
    .sel(time=slice(demo_start_time, demo_end_time))  
    .isel(time=slice(None, None, data_inner_steps))  
    .compute()
)

# sliced_era5 = (
#     full_era5
#     [model.input_variables + model.forcing_variables]
#     .pipe(
#         xarray_utils.selective_temporal_shift,
#         variables=model.forcing_variables,
#         time_shift='24 hours',
#     )
#     .sel(time=slice(demo_start_time, demo_end_time, data_inner_steps))
#     .compute()
# )

print("Checking ERA5 data slice for NaN values...")
if sliced_era5.isnull().any():
    print("Warning: ERA5 data contains NaN values before regridding.")
else:
    print("ERA5 data is clean before regridding.")
    

era5_grid = spherical_harmonic.Grid(
    latitude_nodes=full_era5.sizes['latitude'],
    longitude_nodes=full_era5.sizes['longitude'],
    latitude_spacing=xarray_utils.infer_latitude_spacing(full_era5.latitude),
    longitude_offset=xarray_utils.infer_longitude_offset(full_era5.longitude),
)
regridder = horizontal_interpolation.ConservativeRegridder(
    era5_grid, model.data_coords.horizontal, skipna=True
)
eval_era5 = xarray_utils.regrid(sliced_era5, regridder)
eval_era5 = xarray_utils.fill_nan_with_nearest(eval_era5)

if eval_era5.isnull().all():
    raise ValueError("Regridded ERA5 data is all NaNs. Check the regridding process.")
else:
    print("Regridding completed successfully.")



# Forecast settings
inner_steps = 24  # Save model outputs once every 24 hours 
outer_steps = 10 * 24 // inner_steps  # Forecast for 10 days
timedelta = np.timedelta64(1, 'h') * inner_steps
times = (np.arange(outer_steps) * inner_steps)  # Time axis in hours

# Initialize model state for forecasting
inputs = model.inputs_from_xarray(eval_era5.isel(time=0))
input_forcings = model.forcings_from_xarray(eval_era5.isel(time=0))
rng_key = jax.random.key(42)  # Optional for deterministic models
initial_state = model.encode(inputs, input_forcings, rng_key)

# Use persistence for forcing variables (SST and sea ice cover)
all_forcings = model.forcings_from_xarray(eval_era5.head(time=1))

# Make the forecast with the model
final_state, predictions = model.unroll(
    initial_state,
    all_forcings,
    steps=outer_steps,
    timedelta=timedelta,
    start_with_input=True,
)
predictions_ds = model.data_to_xarray(predictions, times=times)
print("Forecast completed.")

# Coordinates for Fort Collins (254.92° longitude, 40.59° latitude)
fort_collins_coords = {'longitude': 254.92, 'latitude': 40.59}

# Select ERA5 and NeuralGCM predictions at 18Z and for Fort Collins
era5_18z = eval_era5.sel(time=eval_era5.time.dt.hour == 18)
predictions_18z = predictions_ds.sel(time=predictions_ds.time.dt.hour == 18)

# Add a check for NaN values
era5_fort_collins = era5_18z.sel(
    longitude=fort_collins_coords['longitude'], 
    latitude=fort_collins_coords['latitude'], 
    method="nearest"
).dropna(dim='time', how='all')[['z', 't2m']]

predictions_fort_collins = predictions_18z.sel(
    longitude=fort_collins_coords['longitude'], 
    latitude=fort_collins_coords['latitude'], 
    method="nearest"
).dropna(dim='time', how='all')[['z', 't2m']]

# Save the data to a NetCDF file
output_directory = '/home/ennisk'
os.makedirs(output_directory, exist_ok=True)
output_path_nc = os.path.join(output_directory, 'NGCM_FC_may2002.nc')

# Create a new xarray dataset with ERA5 and NeuralGCM data for Fort Collins
print(f"Saving data to {output_path_nc}...")

ds_fort_collins = xarray.Dataset({
    'geopotential_era5': era5_fort_collins.geopotential,
    'temperature_era5': era5_fort_collins.temperature,
    'geopotential_neuralgcm': predictions_fort_collins.geopotential,
    'temperature_neuralgcm': predictions_fort_collins.temperature
})

# Save to NetCDF
ds_fort_collins.to_netcdf(output_path_nc)
print("Data saved successfully.")


# # Selecting ERA5 targets from the same time slice as the predictions
# target_trajectory = model.inputs_from_xarray(
#     eval_era5
#     .thin(time=(inner_steps // data_inner_steps))
#     .isel(time=slice(outer_steps))
# )
# target_data_ds = model.data_to_xarray(target_trajectory, times=times)

# # Combine ERA5 and NeuralGCM predictions into one dataset
# combined_ds = xarray.concat([target_data_ds, predictions_ds], dim='model')
# combined_ds.coords['model'] = ['ERA5', 'NeuralGCM']

# # Plot the comparison for geopotential and temperature at level 850
# # Note: If you want a different level, replace 'level=850' with the desired pressure level

# # Plot Geopotential at 850 hPa
# combined_ds.geopotential.sel(level=850).plot(
#     x='longitude', y='latitude', row='time', col='model', robust=True, aspect=2, size=2
# )
# plt.suptitle('Geopotential Comparison (850 hPa) between ERA5 and NeuralGCM', fontsize=16)
# plt.tight_layout()
# plt.show()

# # Plot Temperature at 850 hPa
# combined_ds.temperature.sel(level=850).plot(
#     x='longitude', y='latitude', row='time', col='model', robust=True, aspect=2, size=2
# )
# plt.suptitle('Temperature Comparison (850 hPa) between ERA5 and NeuralGCM', fontsize=16)
# plt.tight_layout()
# plt.show()

